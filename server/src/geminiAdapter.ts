// server/src/geminiAdapter.ts (ENHANCED VERSION)

import { GoogleGenerativeAI } from '@google/generative-ai';

console.log(process.env.GOOGLE_API_KEY || process.env.GEMINI_API_KEY);
console.log(process.env.HI)
// Initialize with better error handling
const apiKey = process.env.GOOGLE_API_KEY || process.env.GEMINI_API_KEY;
if (!apiKey) {
  throw new Error('GOOGLE_API_KEY or GEMINI_API_KEY environment variable is required');
}

const genAI = new GoogleGenerativeAI(apiKey);

// Support for different models
const getModel = (modelType: 'fast' | 'pro' = 'fast') => {
  const modelName = modelType === 'pro' ? 'gemini-1.5-pro' : 'gemini-1.5-flash-latest';
  return genAI.getGenerativeModel({ model: modelName });
};

export interface GeminiOptions {
  maxTokens?: number;
  temperature?: number;
  model?: 'fast' | 'pro';
  systemPrompt?: string;
}

export async function callGemini(prompt: string, opts: GeminiOptions = {}): Promise<string> {
  const {
    maxTokens = 1500,
    temperature = 0.7,
    model = 'fast',
    systemPrompt
  } = opts;

  console.log(`Calling Gemini API with model: ${model === 'fast' ? 'gemini-1.5-flash-latest' : 'gemini-1.5-pro'}`);

  try {
    const modelInstance = getModel(model);
    
    const generationConfig = {
      maxOutputTokens: maxTokens,
      temperature: temperature,
    };

    // Combine system prompt with user prompt if provided
    const finalPrompt = systemPrompt 
      ? `${systemPrompt}\n\nUser Request: ${prompt}`
      : prompt;

    const result = await modelInstance.generateContent(finalPrompt);
    const response = result.response;
    
    // Better error handling for safety ratings
    if (response.promptFeedback?.blockReason) {
      throw new Error(`Content blocked: ${response.promptFeedback.blockReason}`);
    }

    const text = response.text();

    if (!text || text.trim().length === 0) {
      throw new Error('No content generated by AI model');
    }

    console.log(`Generated ${text.length} characters of content`);
    return text.trim();

  } catch (error: any) {
    console.error('Gemini API Error:', error);
    
    // Provide more specific error messages
    if (error.message.includes('API key')) {
      throw new Error('Invalid API key. Please check your Google AI API key configuration.');
    } else if (error.message.includes('quota')) {
      throw new Error('API quota exceeded. Please try again later or check your billing.');
    } else if (error.message.includes('blocked')) {
      throw new Error('Content was blocked by safety filters. Please try rephrasing your request.');
    } else if (error.message.includes('timeout')) {
      throw new Error('Request timeout. Please try with a shorter prompt or try again.');
    } else {
      throw new Error(`AI generation failed: ${error.message}`);
    }
  }
}

// --- Specialized generation functions ---
export async function generateWithTemplate(
  topic: string, 
  templateType: string,
  language: string = 'english'
): Promise<string> {
  const systemPrompt = `You are an expert document writer. Generate high-quality, professional content in ${language}.
    Always use proper Markdown formatting:
    - Use # for main titles, ## for sections, ### for subsections
    - Use **bold** for important terms
    - Use *italic* for emphasis
    - Use bullet points (*) for lists
    - Use > for important quotes or callouts
    - Use \`code\` for technical terms
    - Ensure proper paragraph spacing and structure`;

  return callGemini(topic, {
    systemPrompt,
    maxTokens: 2000,
    temperature: 0.8,
    model: 'pro' // Use pro model for better quality with templates
  });
}

export async function enhanceExistingContent(
  content: string,
  instructions: string = 'Improve formatting and structure'
): Promise<string> {
  const systemPrompt = `You are a document editor. Enhance the provided content while maintaining its core meaning.
    Focus on:
    - Better Markdown formatting
    - Improved structure and flow
    - Professional language
    - Clear section organization
    - Proper use of headings, lists, and emphasis`;

  const prompt = `${instructions}\n\nContent to enhance:\n\n${content}`;

  return callGemini(prompt, {
    systemPrompt,
    maxTokens: 2500,
    temperature: 0.6
  });
}